name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        go-version: ['1.25.x']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        cache-dependency-path: '**/go.sum'

    - name: Download dependencies and install dev tools
      run: |
        go mod download
        go mod verify
        make dev-deps

    - name: Run quality checks
      run: |
        # Check formatting without auto-fixing
        if ! make lint 2>&1 | tee lint_output.log; then
          echo "::error::Code quality checks failed. See details below:"
          # Extract and annotate specific formatting failures
          grep -E "(gofumpt|goimports|vet|staticcheck|golangci-lint)" lint_output.log | while read -r line; do
            echo "::error::$line"
          done
          echo "::error::To fix locally, run: make lint-fix"
          exit 1
        fi
    - name: Run tests with coverage check
      shell: bash
      run: |
        # Use makefile target for consistent test execution and coverage checking
        if ! make test-ci 2>&1 | tee test_output.log; then
          echo "::error::Tests failed. See details below:"
          # Extract and annotate specific test failures
          grep -E "(FAIL:|--- FAIL:|panic:)" test_output.log | while read -r line; do
            echo "::error::$line"
          done
          exit 1
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Install development tools and run vulnerability check
      run: |
        make dev-deps
        make vuln-check

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: go

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        include:
        - goos: linux
          goarch: amd64
        - goos: linux
          goarch: arm64
        - goos: windows
          goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.25-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: go mod download

    - name: Build binary using makefile
      run: make build-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: framework-led-daemon-${{ matrix.goos }}-${{ matrix.goarch }}
        path: bin/framework-led-daemon-${{ matrix.goos }}-${{ matrix.goarch }}*
        retention-days: 30