# CodeRabbit Configuration for Framework LED Matrix Daemon
# https://docs.coderabbit.ai/guides/review-settings

# Language-specific settings
language: "en-US"

# Review settings
reviews:
  # Auto-review settings
  auto_review:
    enabled: true
    
reviews:
  # Auto-review settings
  auto_review:
    enabled: true

  # When enabled, CodeRabbit will approve once comments are resolved and checks are green
  request_changes_workflow: true
  # High-level summary settings
  high_level_summary: true
  
  # Auto-generate PR titles based on changes
  auto_title_instructions: |
    Generate a concise PR title following conventional commit format:
    - Use prefixes: feat, fix, perf, refactor, docs, test, ci, chore
    - Focus on the primary change or feature being added
    - Keep under 60 characters
    - Be specific about the component affected (e.g., "logging", "metrics", "ci")
    
    Examples:
    - "feat: add structured logging with slog integration" 
    - "perf: optimize metrics collection performance"
    - "ci: add automated release workflow with cross-platform builds"
    - "fix: resolve configuration validation edge cases"
  
  # Poem style for summaries (fun touch)
  poem: true

# Specific focus areas for Go code
review_instructions: |
  Please focus on the following areas when reviewing Go code:
  
  ## Code Quality & Style
  - Follow Go idioms and best practices
  - Check for proper error handling patterns
  - Ensure consistent naming conventions
  - Verify proper use of Go's built-in types and functions
  
  ## Performance & Efficiency
  - Look for potential memory leaks
  - Check for efficient use of goroutines and channels
  - Identify unnecessary allocations
  - Review concurrency patterns for race conditions
  
  ## Security & Safety
  - Check for potential security vulnerabilities
  - Verify input validation and sanitization
  - Review file and network operations for safety
  - Ensure proper resource cleanup (defer statements)
  
  ## Architecture & Design
  - Check for proper separation of concerns
  - Verify interface design and implementations
  - Review dependency injection patterns
  - Ensure testability of code
  
  ## Framework LED Matrix Specific
  - Verify hardware communication patterns are safe
  - Check for proper serial port handling
  - Review system statistics collection for accuracy
  - Ensure configuration management is robust
  
  ## Testing & Documentation
  - Check for adequate test coverage
  - Verify tests are meaningful and not just coverage padding
  - Review documentation for clarity and completeness
  - Ensure examples in documentation are correct

# Path-based review settings
path_instructions:
  - path: "**/*_test.go"
    instructions: |
      For test files, focus on:
      - Test completeness and edge case coverage
      - Proper use of testify or standard testing patterns
      - Table-driven tests where appropriate
      - Proper setup and teardown
      - Mock usage and test isolation
  
  - path: "internal/matrix/**"
    instructions: |
      For matrix package, focus on:
      - Hardware communication safety
      - Proper error handling for serial operations
      - Resource cleanup (connection management)
      - Thread safety for concurrent access
  
  - path: "internal/config/**"
    instructions: |
      For config package, focus on:
      - Validation logic completeness
      - Error message clarity
      - Default value appropriateness
      - Security of configuration handling
  
  - path: "internal/stats/**"
    instructions: |
      For stats package, focus on:
      - Accuracy of system statistics collection
      - Performance impact of collection methods
      - Cross-platform compatibility
      - Memory usage efficiency
  
  - path: "cmd/**"
    instructions: |
      For command-line interfaces, focus on:
      - User experience and error messages
      - Flag and argument validation
      - Help text clarity
      - Exit code conventions

reviews:
  path_filters:
    - "!**/*.md"
    - "!**/go.sum"
    - "!**/*.yml"
    - "!**/*.yaml"
    - "!**/LICENSE"
    - "!**/.gitignore"
# Custom rules for this project
rules:
  # Go-specific rules
  - name: "error-handling"
    description: "Ensure all errors are properly handled"
    pattern: "if.*err.*!=.*nil"
    message: "Verify error is properly handled and not just ignored"
  
  - name: "defer-cleanup"
    description: "Check for resource cleanup"
    pattern: "(Open|Connect|NewClient)"
    message: "Ensure proper cleanup with defer statements"
  
  - name: "goroutine-safety"
    description: "Review goroutine usage"
    pattern: "go func"
    message: "Review for potential race conditions and proper synchronization"
  
  - name: "serial-port-safety"
    description: "Review serial port operations"
    pattern: "(serial\\.|tty|/dev/)"
    message: "Ensure safe serial port operations with proper error handling"

# Tone and communication style
tone: "constructive"
review_style: "comprehensive"

# Integration settings
integrations:
  github:
    enabled: true
    
    # Automatically resolve conversations when suggestions are applied
    auto_resolve: true
    
    # Add labels to PRs based on review findings
    labels:
      - name: "needs-review"
        condition: "has_suggestions"
      - name: "security-review"
        condition: "has_security_issues"
      - name: "performance-review" 
        condition: "has_performance_issues"